{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww21000\viewh13580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs28 \cf0 -  What is Objective C ? \
\
An Object oriented programming language mainly used by Apple for OS X and iOS operating system and their respective APIs cocoa and cocoa touch.\
It is built on top of C, by adding features of Small Talk programming language making it object oriented.\
Initially it was developed by NeXT for its NextStep OS , later it was taken over by Apple.\
\
\
- How is Objective C different from C++ ?\
\
Objective C doesn\'92t support multiple inheritance, C++ does.\
Objective C will allow you to send messages to nil , whereas C++ will crash if you try to do the same.\
Objective C lacks the namespace feature of C++.\
Objective C is focussed on run time decisions and heavily dependent on its run time libraries to handle inheritance and polymorphism , whereas\
C++  the focus lies on static compile time decisions.\
\pard\pardeftab720\sl420
\cf0 Objective C has categories which allows you to add functionality to existing classes. C++ doesn\'92t have this.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\
- What is foundation framework ?\
\
Defines a base layer of Objective C classes.\
Includes the root object class, classes representing basic data types, collection classes for storing other objects and classes representing system information like dates.\
Makes software development easier by introducing consistent conventions for things such as deallocation.\
\
\
- What are protocols ?\
\
A protocol is a group of related properties and methods that can be implemented by any class.\
A class will have to adopt the protocol to implement the methods in it.\
\
\
- What are categories ?\
\
A group of related methods for a class and all the methods are available as if they are declared in the main interface file.\
Help in providing modularity in projects.\
You can add methods to a class for which u don\'92t have the source code.\
You can also override existing methods in already existing class.\
\
\
- What are extensions ?\
\
Extensions are categories without the category name. Also called anonymous categories.\
Special type of category that require methods to be defined in the implementation file of associated class rather than the implementation defined in the category.\
Can be only added to the class for which you have the source code.\
Can be used to override publicly declared properties. , i.e you can make a readonly property declared in a .h file readwrite within the class.\
Any method or variable declared is not even accessible to the inherited class.\
\
\
- What are the differences between categories & extensions ?\
\
Source Code : Not Required in Categories . Required in extensions\
Categories are inherited by the child class. Extensions are not inherited.\
Properties cannot be added to categories but can be added to extensions.\
Method definitions are written in the category .m file itself. Whereas in extensions definitions are written by the respective class implementation file.\
Categories are public. Extensions are private.\
\
What are formal & informal protocols?\
\
Informal protocols are categories that implicitly makes all objects adopters of the protocol.\
Implementation of the methods is optional.\
Formal protocols are a set of methods that the client classes are expected to implement.\
\
\
What are delegates ?\
What is a retain cycle ?\
What is NSCoding ? \
What is NSCopying ?\
What are notifications ?\
What is JSONSerialization ?\
What is NSXMLParser ?\
What is strong , retain , weak and copy ?\
What is the difference between atomic and non atomic properties ?\
When does an object get deallocated ?\
What are blocks ?\
Difference between protocols & blocks ?\
Difference between categories & subclassing ?\
What are predicates ?\
What are leaks ?\
How do you introduce leaks ?\
How do you prevent leaks ?\
What is GCD ?\
What is NSOperation ?\
What is NSURLConnection ?\
What is NSURLSession ?\
Differences between NSURLConnection and NSURLSession ?\
What are predicates ?\
What are comparators ?\
What is KVC & KVO ?\
When does copy behave like retain ?\
What is the difference between properties & ivars in .m file ?\
Difference between delegates and blocks?\
How do you define your own autorelease pools ?\
Difference between function pointers , selectors and blocks.\
Can the key in a NSDictionary be other than NSString ?\
Why use weak references within a block ?\
Is there a class whose base class is not NSObject ?\
Difference between nil / Nil / NULL / NSNull ?\
Difference between copy and mutable copy ?\
Difference between #import\'94\'94  and #import<>\
What is a NSBundle ?\
What is a plist ?\
Explain the usage of @dynamic ?\
What is a responder chain and first responder ?\
What is a singleton class ? How is it different from using a global variable ?\
Difference between synchronous & asynchronous calls ?\
Difference between serial and concurrent queues ?\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
What is performSelector:withObject:? What if I have to performSelector:withObject: but pass 3-4 arguments to the method? (Hint: NSInvocationOperation\
Who calls dealloc method? Can we implement dealloc in ARC? If yes, what is the need to do that?\
How does dispatch_once manages to run only once ?\
What is method swizzling ?\
Does a thread created using performSelectorInBackground: withObject: create its own autorelease pool ?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa160
\ls1\ilvl0\cf0 \expnd0\expndtw0\kerning0
What is NSAutoReleasePool ? When to use them ?\
What is NSNullable ?\
- What are the different types of dispatch queues ?\
- Is main queue a serial or a concurrent queue ? \
- Explain a situation where you would use NSMutableCopy ?\
- What is the difference between using -(id) and -(instanceType) ?\
- What is an attributed string ?}