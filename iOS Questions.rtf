{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww31780\viewh8860\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs26 \cf0 -What does the main.m do in iOS ?\

\b0 \
*This file contains the function main() which is the entry point for execution of any C program. Since objective C is the superset of C the same same hold for objective C as well.\
\
\ul What does main() do?\
\ulnone *The functions parameters argv and arc contain info about the command line parameters passed to the executable on launch.\
*It consists of on auto-release pool to free up memory form the objects.\
*It calls UIApplicationMain() which creates an application object.\
*It returns value returned by UIApplicationMain() to the caller (The shell that launched the executable) \
_____________________________________\
\

\b - Why Auto-released pool is required in ARC when ARC manages the memory for us?\

\b0 *ARC just inserts the retain-release for the objects, thereby removing the retain count (making retain count = 0) but it does not free the memory immediately like in C.\
*ARC is not garbage collection.\
*Hence we need to insert autorelease pool object(iOS <=4.0) or autorelease pool blocks (Ios>=5.0) to free up the memory of those objects whose retain count is 0.\
_____________________________________\
\

\b - Should auto-release pool be used elsewhere in the code other than main?\

\b0 *Yes, sometimes when we create a lot of objects and most of them being one-time usage, we want to free up memory used after its usage without further delay.\
\

\i //Non Arc Env\
@autoreleasepool \
\{\
    MyObject *obj = [[MyObject alloc] init]; // no autorelease call here\

\i0     //Since MyObject is never released its a leak even when the pool exits\

\i \}\
\
//Non Arc Env\
@autoreleasepool \
\{\
    MyObject *obj = [[[MyObject alloc] init] autorelease]; \

\i0     //Memory is freed once the block ends\

\i \}\
\
// Arc Env\
@autoreleasepool \
\{\
    MyObject *obj = [[MyObject alloc] init]; \

\i0     //No need to do anything once the obj variable is out of scope there are no strong pointers so the memory will free\

\i \}\
\
// Arc Env\
MyObject *obj
\i0  //strong pointer from elsewhere in scope  
\i \
@autoreleasepool \
\{\
   obj = [[MyObject alloc] init]; \

\i0     //Not freed still has a strong pointer \

\i \}\

\i0 _____________________________________\
\

\b - What is  the role of UIApplicationMain ?\

\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 *This function instantiates the application object from the principal class (UIApplication) and instantiates the delegate from the given class and sets the delegate for the application.\
*It also sets up the main event loop, including the applications run loop and begins processing events.\
*If applications Info.plist specifies a main nib file to be loaded, by including NSMainNibFile key and a valid file name for the value, the function loads that nib file.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 *Despite the declared return type, this function never returns.\
_____________________________________\
\

\b - Brief details on the parameters specified for  UIApplicationMain function?\

\b0 *This function creates the main application object. \
*If the third parameter is specifies nil(default), it will create an instance of 
\i UIApplication
\i0 , else you can subclass 
\i UIApplication
\i0  and provide it as third parameter. \
*If the fourth parameter if not nil is interpreted as the name of the class for application delegate. If it is nil, it signifies that app delegate will be created in the main NIB file.\
*Next 
\i UIApplicationMain()  
\i0 loads and parses the app\'92s Info.plist. If it contains a key named \'91Main nib file base name(NSMainNibFile)\'92, the function will also load the NIB specified here.\
*UIApplicationMain() then creates the application\'92s  \ul runloop \ulnone that is used by UIApplication instance to process events such as touches or network events.\
*Before the app object processes the first event, it finally sends application:didFinishLaunchingWithOptions: a message to its delegate, giving us a chance to do our own setup. The least we have to do here is to put our main window on the screen by sending it a 
\i makeKeyAndVisible
\i0  message\
_____________________________________\
\

\b -What is run loop?\

\b0 The run loop is basically an infinite loop that causes 
\i UIApplicationMain()
\i0  to never return. IT is responsible to process touch and network events.\
_____________________________________\
\

\b - What is UIApplication ?\

\b0 \
\ul What is it?\
\ulnone *UIApplication class provides a centralised point of control and coordination for apps running in iOS.\
*Every app has exactly one instance of UIApplication object.\
\
\ul When is it created?\
\ulnone *When an app is launched, the system calls the UIApplicationMain function, which creates a singleton UIApplication object.\
\
\ul What does it do?\
\ulnone *The major role of the application object is to handle the initial routing of the incoming user events.\
*It dispatches action messages forwarded to it by control objects(instances of UIControl class) to different target objects.\
*It maintains a list of open windows(UIWindow objects) and through those can retrieve any of the apps UIView objects.\
*UIApplication class defines a delegate that conforms to UIApplicationDelegate protocol and must implement some of the protocol methods.\
  The app objects informs the delegate of  significant runtime events like app launch, low memory warnings, app termination etc to respond appropriately.\
\
\ul What else it can do?\
\ulnone App object can do the following(device specific behaviour)\
*Temporarily suspend incoming touch events (beginIgnoringInteractionEvents)\
*Register for remote notifications (registerForRemoteNotifications)\
*Determine whether there is an installed app registered to handle a URL Scheme (canOpenURL:)\
*Schedule and cancel notifications(scheduleLocalNotification:, cancelLocalNotification:)\
_____________________________________\
\

\b - What is app delegate ?\

\b0 \
_____________________________________\

\b \
- What are the different app states ?\
- Explain app life cycle ?\
- Explain view controller life cycle ?\
- Explain UIKit class hierarchy?\
- What is a file owner ?\
- What is a responder chain ?\
- What are first responders ?\
- What\'92s new in iOS 8 and iOS 9 ?\
- What is a UIWindow ?\
- Explain push notification flow / cycle ?\
- Difference between a view and a layer ?\
- What is APNS ? What is the maximum payload size ?\
- Can you send Push Notification to only a set of users ? (YES) How ?\
- What happens when a app that is downloading some data is sent to Background ?\
- Explain iOS architecture ?\
- Can you decide to receive/not receive push notifications ?\
- Why use table views / collection views instead of scroll views ?\
- Can a app has multiple windows ? Difference between windows and view ?\
- What is prepareForReuse ?\
- What are layoutSubviews ?\
- What is setNeedsDisplay ?\
- What is setNeedsLayout ?\
- What is initWithCoder & initWithNibName ?\
- What are size classes ?\
- What is content hugging and content resistance/compression ?\
- What is Core Data ? Explain Core data stack ?\
- What is new in Core Location ?\
- How do you call a UIButtonAction programmatically ?\
- What is UIControl ?\
- What is a UIBezierPath ?\
- What is IBDesignables & IBInspectable ?\
- Steps in submitting an app to a app store ?\
- What is the direct superclass of UIButton ?\
- Tell me something about stack views introduced in iOS 9 ?\
- What is viewDidLayoutSubviews ?\
- What is the difference between content inset and content offset ?\
- What is the use of reuse identifier in table views ?\
- What is the use of addChildViewController ?}